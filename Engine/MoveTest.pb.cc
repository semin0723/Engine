// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: MoveTest.proto
// Protobuf C++ Version: 5.28.3

#include "MoveTest.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace MoveTest {

inline constexpr PlayerEnter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        objnum_{::uint64_t{0u}},
        objver_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerEnter::PlayerEnter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerEnterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerEnterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerEnterDefaultTypeInternal() {}
  union {
    PlayerEnter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerEnterDefaultTypeInternal _PlayerEnter_default_instance_;

inline constexpr Move::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        objnum_{::uint64_t{0u}},
        objver_{::uint64_t{0u}},
        x_{0},
        y_{0},
        delta_{0},
        speed_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Move::Move(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveDefaultTypeInternal() {}
  union {
    Move _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveDefaultTypeInternal _Move_default_instance_;

inline constexpr AsyncPlayer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        objnum_{::uint64_t{0u}},
        objver_{::uint64_t{0u}},
        x_{0},
        y_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AsyncPlayer::AsyncPlayer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AsyncPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AsyncPlayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AsyncPlayerDefaultTypeInternal() {}
  union {
    AsyncPlayer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AsyncPlayerDefaultTypeInternal _AsyncPlayer_default_instance_;
}  // namespace MoveTest
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_MoveTest_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_MoveTest_2eproto = nullptr;
const ::uint32_t
    TableStruct_MoveTest_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::MoveTest::PlayerEnter, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::PlayerEnter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MoveTest::PlayerEnter, _impl_.objnum_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::PlayerEnter, _impl_.objver_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _impl_.objnum_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _impl_.objver_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _impl_.speed_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::Move, _impl_.delta_),
        0,
        1,
        2,
        3,
        5,
        4,
        PROTOBUF_FIELD_OFFSET(::MoveTest::AsyncPlayer, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::AsyncPlayer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MoveTest::AsyncPlayer, _impl_.objnum_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::AsyncPlayer, _impl_.objver_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::AsyncPlayer, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::MoveTest::AsyncPlayer, _impl_.y_),
        0,
        1,
        2,
        3,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::MoveTest::PlayerEnter)},
        {12, 26, -1, sizeof(::MoveTest::Move)},
        {32, 44, -1, sizeof(::MoveTest::AsyncPlayer)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::MoveTest::_PlayerEnter_default_instance_._instance,
    &::MoveTest::_Move_default_instance_._instance,
    &::MoveTest::_AsyncPlayer_default_instance_._instance,
};
const char descriptor_table_protodef_MoveTest_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016MoveTest.proto\022\010MoveTest\"M\n\013PlayerEnte"
    "r\022\023\n\006objnum\030\001 \001(\004H\000\210\001\001\022\023\n\006objver\030\002 \001(\004H\001"
    "\210\001\001B\t\n\007_objnumB\t\n\007_objver\"\256\001\n\004Move\022\023\n\006ob"
    "jnum\030\001 \001(\004H\000\210\001\001\022\023\n\006objver\030\002 \001(\004H\001\210\001\001\022\016\n\001"
    "x\030\003 \001(\002H\002\210\001\001\022\016\n\001y\030\004 \001(\002H\003\210\001\001\022\022\n\005speed\030\005 "
    "\001(\002H\004\210\001\001\022\022\n\005delta\030\006 \001(\001H\005\210\001\001B\t\n\007_objnumB"
    "\t\n\007_objverB\004\n\002_xB\004\n\002_yB\010\n\006_speedB\010\n\006_del"
    "ta\"y\n\013AsyncPlayer\022\023\n\006objnum\030\001 \001(\004H\000\210\001\001\022\023"
    "\n\006objver\030\002 \001(\004H\001\210\001\001\022\016\n\001x\030\003 \001(\002H\002\210\001\001\022\016\n\001y"
    "\030\004 \001(\002H\003\210\001\001B\t\n\007_objnumB\t\n\007_objverB\004\n\002_xB"
    "\004\n\002_yb\006proto3"
};
static ::absl::once_flag descriptor_table_MoveTest_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_MoveTest_2eproto = {
    false,
    false,
    413,
    descriptor_table_protodef_MoveTest_2eproto,
    "MoveTest.proto",
    &descriptor_table_MoveTest_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_MoveTest_2eproto::offsets,
    file_level_enum_descriptors_MoveTest_2eproto,
    file_level_service_descriptors_MoveTest_2eproto,
};
namespace MoveTest {
// ===================================================================

class PlayerEnter::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlayerEnter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_._has_bits_);
};

PlayerEnter::PlayerEnter(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveTest.PlayerEnter)
}
PlayerEnter::PlayerEnter(
    ::google::protobuf::Arena* arena, const PlayerEnter& from)
    : PlayerEnter(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PlayerEnter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayerEnter::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, objnum_),
           0,
           offsetof(Impl_, objver_) -
               offsetof(Impl_, objnum_) +
               sizeof(Impl_::objver_));
}
PlayerEnter::~PlayerEnter() {
  // @@protoc_insertion_point(destructor:MoveTest.PlayerEnter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerEnter::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PlayerEnter::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PlayerEnter_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PlayerEnter::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PlayerEnter>(),
            ::google::protobuf::Message::GetNewImpl<PlayerEnter>(),
            ::google::protobuf::Message::GetClearImpl<PlayerEnter>(), &PlayerEnter::ByteSizeLong,
                &PlayerEnter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_._cached_size_),
            false,
        },
        &PlayerEnter::kDescriptorMethods,
        &descriptor_table_MoveTest_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PlayerEnter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PlayerEnter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MoveTest::PlayerEnter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint64 objver = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PlayerEnter, _impl_.objver_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_.objver_)}},
    // optional uint64 objnum = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PlayerEnter, _impl_.objnum_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_.objnum_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 objnum = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_.objnum_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 objver = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_.objver_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PlayerEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveTest.PlayerEnter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.objnum_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.objver_) -
        reinterpret_cast<char*>(&_impl_.objnum_)) + sizeof(_impl_.objver_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerEnter::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerEnter& this_ = static_cast<const PlayerEnter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerEnter::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerEnter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:MoveTest.PlayerEnter)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional uint64 objnum = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_objnum(), target);
          }

          // optional uint64 objver = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_objver(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:MoveTest.PlayerEnter)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerEnter::ByteSizeLong(const MessageLite& base) {
          const PlayerEnter& this_ = static_cast<const PlayerEnter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerEnter::ByteSizeLong() const {
          const PlayerEnter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:MoveTest.PlayerEnter)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional uint64 objnum = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_objnum());
            }
            // optional uint64 objver = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_objver());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerEnter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerEnter*>(&to_msg);
  auto& from = static_cast<const PlayerEnter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveTest.PlayerEnter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.objnum_ = from._impl_.objnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.objver_ = from._impl_.objver_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerEnter::CopyFrom(const PlayerEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveTest.PlayerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerEnter::InternalSwap(PlayerEnter* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_.objver_)
      + sizeof(PlayerEnter::_impl_.objver_)
      - PROTOBUF_FIELD_OFFSET(PlayerEnter, _impl_.objnum_)>(
          reinterpret_cast<char*>(&_impl_.objnum_),
          reinterpret_cast<char*>(&other->_impl_.objnum_));
}

::google::protobuf::Metadata PlayerEnter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Move::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Move>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Move, _impl_._has_bits_);
};

Move::Move(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveTest.Move)
}
Move::Move(
    ::google::protobuf::Arena* arena, const Move& from)
    : Move(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Move::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, objnum_),
           0,
           offsetof(Impl_, speed_) -
               offsetof(Impl_, objnum_) +
               sizeof(Impl_::speed_));
}
Move::~Move() {
  // @@protoc_insertion_point(destructor:MoveTest.Move)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Move::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Move::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Move_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Move::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Move>(),
            ::google::protobuf::Message::GetNewImpl<Move>(),
            ::google::protobuf::Message::GetClearImpl<Move>(), &Move::ByteSizeLong,
                &Move::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Move, _impl_._cached_size_),
            false,
        },
        &Move::kDescriptorMethods,
        &descriptor_table_MoveTest_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Move::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Move::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Move, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MoveTest::Move>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint64 objnum = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Move, _impl_.objnum_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.objnum_)}},
    // optional uint64 objver = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Move, _impl_.objver_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.objver_)}},
    // optional float x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.x_)}},
    // optional float y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.y_)}},
    // optional float speed = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 5, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.speed_)}},
    // optional double delta = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 4, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.delta_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 objnum = 1;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.objnum_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 objver = 2;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.objver_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional float x = 3;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.x_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float y = 4;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.y_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float speed = 5;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.speed_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional double delta = 6;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.delta_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveTest.Move)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.objnum_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.speed_) -
        reinterpret_cast<char*>(&_impl_.objnum_)) + sizeof(_impl_.speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Move::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Move& this_ = static_cast<const Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Move::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:MoveTest.Move)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional uint64 objnum = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_objnum(), target);
          }

          // optional uint64 objver = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_objver(), target);
          }

          // optional float x = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_x(), target);
          }

          // optional float y = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_y(), target);
          }

          // optional float speed = 5;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_speed(), target);
          }

          // optional double delta = 6;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_delta(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:MoveTest.Move)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Move::ByteSizeLong(const MessageLite& base) {
          const Move& this_ = static_cast<const Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Move::ByteSizeLong() const {
          const Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:MoveTest.Move)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // optional uint64 objnum = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_objnum());
            }
            // optional uint64 objver = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_objver());
            }
            // optional float x = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // optional float y = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // optional double delta = 6;
            if (cached_has_bits & 0x00000010u) {
              total_size += 9;
            }
            // optional float speed = 5;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Move::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Move*>(&to_msg);
  auto& from = static_cast<const Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveTest.Move)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.objnum_ = from._impl_.objnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.objver_ = from._impl_.objver_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveTest.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Move::InternalSwap(Move* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Move, _impl_.speed_)
      + sizeof(Move::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(Move, _impl_.objnum_)>(
          reinterpret_cast<char*>(&_impl_.objnum_),
          reinterpret_cast<char*>(&other->_impl_.objnum_));
}

::google::protobuf::Metadata Move::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AsyncPlayer::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AsyncPlayer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_._has_bits_);
};

AsyncPlayer::AsyncPlayer(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveTest.AsyncPlayer)
}
AsyncPlayer::AsyncPlayer(
    ::google::protobuf::Arena* arena, const AsyncPlayer& from)
    : AsyncPlayer(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AsyncPlayer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AsyncPlayer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, objnum_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, objnum_) +
               sizeof(Impl_::y_));
}
AsyncPlayer::~AsyncPlayer() {
  // @@protoc_insertion_point(destructor:MoveTest.AsyncPlayer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AsyncPlayer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AsyncPlayer::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AsyncPlayer_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AsyncPlayer::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AsyncPlayer>(),
            ::google::protobuf::Message::GetNewImpl<AsyncPlayer>(),
            ::google::protobuf::Message::GetClearImpl<AsyncPlayer>(), &AsyncPlayer::ByteSizeLong,
                &AsyncPlayer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_._cached_size_),
            false,
        },
        &AsyncPlayer::kDescriptorMethods,
        &descriptor_table_MoveTest_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AsyncPlayer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> AsyncPlayer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MoveTest::AsyncPlayer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.y_)}},
    // optional uint64 objnum = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AsyncPlayer, _impl_.objnum_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.objnum_)}},
    // optional uint64 objver = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AsyncPlayer, _impl_.objver_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.objver_)}},
    // optional float x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 objnum = 1;
    {PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.objnum_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 objver = 2;
    {PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.objver_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional float x = 3;
    {PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.x_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float y = 4;
    {PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.y_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AsyncPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveTest.AsyncPlayer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.objnum_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.objnum_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AsyncPlayer::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AsyncPlayer& this_ = static_cast<const AsyncPlayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AsyncPlayer::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AsyncPlayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:MoveTest.AsyncPlayer)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional uint64 objnum = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_objnum(), target);
          }

          // optional uint64 objver = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_objver(), target);
          }

          // optional float x = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_x(), target);
          }

          // optional float y = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_y(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:MoveTest.AsyncPlayer)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AsyncPlayer::ByteSizeLong(const MessageLite& base) {
          const AsyncPlayer& this_ = static_cast<const AsyncPlayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AsyncPlayer::ByteSizeLong() const {
          const AsyncPlayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:MoveTest.AsyncPlayer)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // optional uint64 objnum = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_objnum());
            }
            // optional uint64 objver = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_objver());
            }
            // optional float x = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // optional float y = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AsyncPlayer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AsyncPlayer*>(&to_msg);
  auto& from = static_cast<const AsyncPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveTest.AsyncPlayer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.objnum_ = from._impl_.objnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.objver_ = from._impl_.objver_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AsyncPlayer::CopyFrom(const AsyncPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveTest.AsyncPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AsyncPlayer::InternalSwap(AsyncPlayer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.y_)
      + sizeof(AsyncPlayer::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(AsyncPlayer, _impl_.objnum_)>(
          reinterpret_cast<char*>(&_impl_.objnum_),
          reinterpret_cast<char*>(&other->_impl_.objnum_));
}

::google::protobuf::Metadata AsyncPlayer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace MoveTest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_MoveTest_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
